{
	"name": "df_dim_hechos_ordenes",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "order_details_csv",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "pizzas_csv",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "pizza_types_csv",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "orders_csv",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dim_hechos_ordenes",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          order_details_id as string,",
				"          order_id as string,",
				"          pizza_id as string,",
				"          quantity as integer '000'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          pizza_id as string,",
				"          pizza_type_id as string,",
				"          size as string,",
				"          price as float '000.##'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          pizza_type_id as string,",
				"          name as string,",
				"          category as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          order_id as string,",
				"          date as date 'yyyy-MM-dd',",
				"          time as timestamp 'HH:mm:ss'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source1, source2 join(source1@pizza_id == source2@pizza_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, source3 join(source2@pizza_type_id == source3@pizza_type_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, source4 join(source1@order_id == source4@order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          order_details_id,",
				"          pizza_type_id = source2@pizza_type_id,",
				"          pizza_id = source1@pizza_id,",
				"          date,",
				"          time,",
				"          quantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idOrden as integer,",
				"          idTipo as string,",
				"          tamanoNom as string,",
				"          fecha as date,",
				"          tiempo as timestamp,",
				"          cantidad as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          idOrden = order_details_id,",
				"          idTipo = pizza_type_id,",
				"          tamanoNom = pizza_id,",
				"          fecha = date,",
				"          tiempo = time,",
				"          cantidad = quantity",
				"     )) ~> sink1"
			]
		}
	}
}